#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdbool.h>

#define DEFAULT_PORT "1126"
#define MAXIMUM_CLIENTS 100

typedef struct ClientHandler {
    int index;

    int socket;
} ClientHandler;

typedef struct Server {
    int listening_socket;

    ClientHandler clientHandlers[MAXIMUM_CLIENTS];
    int number_of_clients;
} Server;

typedef struct Client {

} Client;

void server(const char* port);
void client(const char* ip_address, const char* port);

int main(int argc, char* argv[]) {
    switch (argc) {
        case 2: // use the localhost as the ip and the default port (1126)
            if (strcmp(argv[1], "server") == 0) {
                server(DEFAULT_PORT);
            } else if (strcmp(argv[1], "client") == 0) {
                client("127.0.0.1", DEFAULT_PORT);
            }
            break;
        case 3: // use the ip address passed through and use the default port (1126)
            if (strcmp(argv[1], "server") == 0) {
                server(DEFAULT_PORT);
            } else if (strcmp(argv[1], "client") == 0) {
                client(argv[2], DEFAULT_PORT);
            }
            break;
        case 4: // use the ip address and port passed through
            if (strcmp(argv[1], "server") == 0) {
                server(argv[3]);
            } else if (strcmp(argv[1], "client") == 0) {
                client(argv[2], argv[3]);
            }
            break;
        default:
            printf("a-chat usage: [type] [ip-address] [port]\n");
            printf("\n");
            printf("types:\n");
            printf("\n");
            printf("  server - host a a-chat session\n");
            printf("  client - join a a-chat session\n");
            break;
    }

    return 0;
}

void* client_handler(void* main_server) {
    ClientHandler* client_handler = (ClientHandler*) new_client_handler;

    char buffer[1024];
    while (recv(client_handler->socket, &buffer, sizeof(buffer), 0) != 0) {
        printf("%s\n", buffer);
        send(client_handler->socket, buffer, strlen(buffer), 0);
    }

    printf("Client disconnected!\n");
    int shutdown_result = shutdown(client_handler->socket, 2);
    if (shutdown_result == -1) {
        printf("ERROR: Failed to shutdown client socket!\n");
        return NULL;
    }

    return NULL;
}

void* accept_clients(void* main_server) {
    Server* server = (Server*) main_server;

    struct sockaddr_storage their_address;
    socklen_t address_size = sizeof(struct sockaddr_storage);
    while ((server->clientHandlers[server->number_of_clients].socket = accept(server->listening_socket, (struct sockaddr*) &their_address, &address_size)) > 0) {
        printf("Connected to client!\n");
        server->number_of_clients++;

        pthread_t client_handler_thread;
        pthread_create(&client_handler_thread, NULL, client_handler, client_socket);
    }

    return NULL;
}

void server(const char* port) {
    struct addrinfo hints;
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC; // allows for either IPv4 or IPv6, it doesnt matter to us
    hints.ai_socktype = SOCK_STREAM; // use TCP
    hints.ai_flags = AI_PASSIVE; // get the correct IP for us

    struct addrinfo* address_info;
    if (getaddrinfo(NULL, port, &hints, &address_info) != 0) {
        printf("ERROR: Failed to get address infomation!\n");
        return;
    }

    Server server = {0};

    server.listening_socket = socket(address_info->ai_family, address_info->ai_socktype, address_info->ai_protocol);
    if (server.listening_socket == -1) {
        printf("ERROR: Failed to create listen socket!\n");
        return;
    }

    int bind_result = bind(server.listening_socket, address_info->ai_addr, address_info->ai_addrlen);
    if (bind_result == -1) {
        printf("ERROR: Failed to bind port!\n");
        return;
    }

    freeaddrinfo(address_info);
    address_info = NULL;

    int listen_result = listen(server.listening_socket, 10);
    if (listen_result == -1) {
        printf("ERROR: Failed to begin listening!\n");
        return;
    }

    pthread_t accepting_thread;
    pthread_create(&accepting_thread, NULL, accept_clients, &server);

    printf("Started a-chat server at port %s!\n", port);

    while (true) {

    }
}

void* client_recv(void* client_socket) {
    char buffer[1024];
    while (recv(*(int*) client_socket, &buffer, sizeof(buffer), 0) != 0) {
        printf("%s\n", buffer);
    }

    return NULL;
}

void client(const char* ip_address, const char* port) {
    printf("Joining a-chat server at %s:%s!\n", ip_address, port);

    struct addrinfo hints;
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC; // allows for either IPv4 or IPv6, it doesnt matter to us
    hints.ai_socktype = SOCK_STREAM; // use TCP

    struct addrinfo* address_info;
    if (getaddrinfo(ip_address, port, &hints, &address_info) != 0) {
        printf("ERROR: Failed to get address infomation!\n");
        return;
    }

    int* client_socket = (int*) malloc(sizeof(int));
    *client_socket = socket(address_info->ai_family, address_info->ai_socktype, address_info->ai_protocol);
    if (*client_socket == -1) {
        printf("ERROR: Failed to create client socket!\n");
        free(client_socket);
        return;
    }

    int connect_status = connect(*client_socket, address_info->ai_addr, address_info->ai_addrlen);
    if (connect_status == -1) {
        printf("ERROR: Failed to connect to server!\n");
        free(client_socket);
        return;
    }

    freeaddrinfo(address_info);
    address_info = NULL;

    pthread_t recv_thread;
    pthread_create(&recv_thread, NULL, client_recv, client_socket);

    printf("enter 'exit' to quit\n");

    while (true) {
        char message[1024];
        fgets(message, sizeof(message), stdin);
        message[strcspn(message, "\n")] = 0;

        if (strcmp(message, "exit") == 0) {
            break;
        }

        send(*client_socket, message, strlen(message), 0);
    }

    printf("Server disconnected!\n");
    int shutdown_result = shutdown(*client_socket, 2);
    if (shutdown_result == -1) {
        printf("ERROR: Failed to shutdown socket!\n");
        return;
    }

    free(client_socket);
}
